name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Configure Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Determine release type
      id: release-type
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
        else
          # Auto-determine based on conventional commits
          if git log --format="%s" -n 20 | grep -qE "^feat(\(.+\))?!:|^BREAKING CHANGE:"; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif git log --format="%s" -n 20 | grep -qE "^feat(\(.+\))?:"; then
            echo "type=minor" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Generate changelog
      id: changelog
      run: |
        # Install conventional-changelog-cli
        npm install -g conventional-changelog-cli
        
        # Generate changelog
        conventional-changelog -p angular -i CHANGELOG.md -s -r 0
        
        # Get the latest release notes for this version
        latest_changes=$(awk '/^## \[/{if(++count==2) exit} count==1{print}' CHANGELOG.md | tail -n +2)
        echo "changes<<EOF" >> $GITHUB_OUTPUT
        echo "$latest_changes" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Update version
      id: version
      run: |
        release_type="${{ steps.release-type.outputs.type }}"
        new_version=$(npm version $release_type --no-git-tag-version)
        echo "version=$new_version" >> $GITHUB_OUTPUT
        echo "version_number=${new_version#v}" >> $GITHUB_OUTPUT

    - name: Update package files
      run: |
        # Update version in package.json files
        find . -name "package.json" -not -path "./node_modules/*" -exec npm version ${{ steps.release-type.outputs.type }} --no-git-tag-version {} \;

    - name: Run tests before release
      run: |
        npm run test:unit
        npm run lint
        npm run type-check

    - name: Build release
      run: npm run build
      env:
        NODE_ENV: production

    - name: Commit release changes
      run: |
        git add .
        git commit -m "chore(release): ${{ steps.version.outputs.version }}"
        git tag ${{ steps.version.outputs.version }}

    - name: Push changes
      run: |
        git push origin main
        git push origin ${{ steps.version.outputs.version }}

    - name: Create GitHub Release
      id: release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: ${{ steps.version.outputs.version }}
        body: |
          # What's Changed
          
          ${{ steps.changelog.outputs.changes }}
          
          ## Installation
          
          ```bash
          npm install greenmate@${{ steps.version.outputs.version_number }}
          ```
          
          ## Docker Image
          
          ```bash
          docker pull ghcr.io/greenmate/app:${{ steps.version.outputs.version_number }}
          ```
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.previous-version.outputs.version }}...${{ steps.version.outputs.version }}
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: ./CHANGELOG.md
        asset_name: CHANGELOG.md
        asset_content_type: text/markdown

  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.released == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.release.outputs.tag }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}},value=${{ needs.release.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.release.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.release.outputs.version }}
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ needs.release.outputs.version }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).created }}

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release, docker-build]
    if: always() && needs.release.outputs.released == 'true'

    steps:
    - name: Notify Slack
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#releases'
        text: |
          üéâ **New Release**: ${{ needs.release.outputs.version }}
          
          üì¶ **Package**: https://github.com/${{ github.repository }}/releases/tag/${{ needs.release.outputs.version }}
          üê≥ **Docker**: `ghcr.io/${{ github.repository }}:${{ needs.release.outputs.version }}`
          üöÄ **Live**: https://greenmate.vercel.app
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Discord
      if: success()
      uses: Ilshidur/action-discord@master
      with:
        args: |
          üéâ **GreenMate ${{ needs.release.outputs.version }} Released!**
          
          Check out the latest features and improvements at https://greenmate.vercel.app
          
          üìã View release notes: https://github.com/${{ github.repository }}/releases/tag/${{ needs.release.outputs.version }}
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

    - name: Update status page
      if: success()
      run: |
        curl -X POST "${{ secrets.STATUS_PAGE_WEBHOOK }}" \
          -H "Content-Type: application/json" \
          -d '{
            "component_id": "greenmate-app",
            "status": "operational",
            "message": "New version ${{ needs.release.outputs.version }} deployed successfully"
          }'

    - name: Notify team on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#alerts'
        text: |
          ‚ùå **Release Failed**: ${{ needs.release.outputs.version }}
          
          The release process encountered an error. Please check the workflow logs.
          
          üîó **Workflow**: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.released == 'true'

    steps:
    - name: Checkout docs repository
      uses: actions/checkout@v4
      with:
        repository: greenmate/docs
        token: ${{ secrets.DOCS_PAT }}
        path: docs

    - name: Update version in docs
      run: |
        cd docs
        sed -i "s/version: .*/version: ${{ needs.release.outputs.version }}/" _config.yml
        
        # Update installation instructions
        sed -i "s/greenmate@.*/greenmate@${{ needs.release.outputs.version_number }}/" installation.md
        
        # Update Docker instructions
        sed -i "s/ghcr.io\/greenmate\/app:.*/ghcr.io\/greenmate\/app:${{ needs.release.outputs.version_number }}/" docker.md

    - name: Commit and push docs updates
      run: |
        cd docs
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add .
        git commit -m "docs: update to version ${{ needs.release.outputs.version }}" || exit 0
        git push origin main

  post-release:
    name: Post-release Tasks
    runs-on: ubuntu-latest
    needs: [release, docker-build, notify, update-docs]
    if: always() && needs.release.outputs.released == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create next development version
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        # Increment patch version for development
        npm version prerelease --preid=dev --no-git-tag-version
        
        git add package*.json
        git commit -m "chore: bump version to next development iteration"
        git push origin main

    - name: Create roadmap issue
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ needs.release.outputs.version }}';
          const nextMinor = version.split('.').map((v, i) => 
            i === 1 ? parseInt(v) + 1 : i === 2 ? 0 : v
          ).join('.');
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üó∫Ô∏è Roadmap: v${nextMinor}`,
            body: `## Roadmap for v${nextMinor}
            
            This issue tracks the planning and progress for the next minor release.
            
            ### Planned Features
            - [ ] Feature 1
            - [ ] Feature 2
            - [ ] Feature 3
            
            ### Performance Improvements
            - [ ] Improvement 1
            - [ ] Improvement 2
            
            ### Bug Fixes
            - [ ] Fix 1
            - [ ] Fix 2
            
            ---
            
            **Target Release Date**: TBD
            **Current Version**: ${version}`,
            labels: ['roadmap', 'enhancement']
          });

    - name: Trigger dependency updates
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'dependency-update.yml'
          });

    - name: Clean up old releases
      uses: actions/github-script@v7
      with:
        script: |
          const releases = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          // Keep last 10 releases, delete older ones
          const releasesToDelete = releases.data.slice(10);
          
          for (const release of releasesToDelete) {
            if (!release.prerelease && !release.draft) {
              console.log(`Deleting old release: ${release.name}`);
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id
              });
            }
          }